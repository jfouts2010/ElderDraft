@page "/ThemeTribal"

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Globalization
@using System.Net
@using System.Web
@using System.Threading.Tasks
@using System.IO
@using System.Text
@using Microsoft.AspNetCore.WebUtilities
@using Radzen.Blazor
@using Blazored.LocalStorage;
@inject NavigationManager navManager

<input type="text" id="setsInput" name="setsInput" @bind="@setQuery">
<button class="btn btn-primary" @onclick="GenerateQuery">Generate Query</button>
<br>
@readableQuery
<br>
<button class="btn btn-primary" @onclick="Submit">Submit</button>

@code {
    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }
    class Theme
    {
        public string name;
        public List<string> cards;
    }
    public string setQuery = "";
    public string readableQuery = "";
    List<Theme> Themes = new List<Theme>();
    public void GenerateQuery()
    {
        List<Theme> themes = JsonConvert.DeserializeObject<List<Theme>>(new Data().ThemesString);
        List<Theme> tribes = JsonConvert.DeserializeObject<List<Theme>>(new Data().TribeString);
        List<int> themeNumbers = new List<int>();
        List<int> tribeNumbers = new List<int>();
        for (int i = 0; i < 1000; i++)
        {
            Random r = new Random();
            int totalThemes = themes.Count;
            int totalTribes = tribes.Count;
            themeNumbers = new List<int>();
            tribeNumbers = new List<int>();
            while (themeNumbers.Count < 4)
            {
                int rand = r.Next(0, totalThemes);
                if (!themeNumbers.Contains(rand))
                {
                    themeNumbers.Add(rand);
                }
            }
            while (tribeNumbers.Count < 2)
            {
                int rand = r.Next(0, totalTribes);
                if (!tribeNumbers.Contains(rand))
                {
                    tribeNumbers.Add(rand);
                }
            }
        }
        List<string> allTT = new List<string>();
        allTT.AddRange(themeNumbers.Select(p => themes[p].name).ToList());
        allTT.AddRange(tribeNumbers.Select(p => tribes[p].name).ToList());
        setQuery = string.Join(',', allTT);
        readableQuery = string.Join(',', allTT.Select(p => p.Replace("/themes/", "").Replace("/tribes/", "")));
    }
    public void Submit()
    {
        if (!string.IsNullOrEmpty(setQuery))
        {
            var query = new Dictionary<string, string> { { "query", setQuery }, { "themeddraft", true.ToString() } };
            navManager.NavigateTo(QueryHelpers.AddQueryString(navManager.BaseUri + "/Draft", query));
        }
    }
}
