@page "/NewDeck"
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System;
@using System.Collections.Generic;
@using System.IO;
@using System.Linq;
@using System.Net;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Text;
@using System.Threading.Tasks;
@inject IJSRuntime JSRuntime
<h3>NewDeck</h3>
<table>
    <tr>
        <th valign="top">
            <textarea style="height: 500px;width: 20vw;overflow: auto;" @bind="@cardsString">
                       
                    </textarea>
        </th>
        <th valign="top">
            <input type="text" id="vehicle1" name="vehicle1" @bind="@commander"> Commander
            <br />
            <input type="checkbox" id="vehicle1" name="vehicle1" @bind="@fixlands"> Fix Lands?
            <br />
            <button @onclick="@Submit">Submit</button>
        </th>
    </tr>
</table>
@code {
    public string commander = "";
    public bool fixlands = false;
    public string cardsString = "";
    public async void Submit()
    {
        Task<string> output = FullCreate(commander, cardsString, fixlands);
        await JSRuntime.InvokeAsync<object>(
        "FileSaveAs",
        "Deck - " + DateTime.Now.ToShortDateString().Replace('/', '-') + ".json",
        output.Result
        );
    }
    public static async Task<string> FullCreate(string commander, string deckString, bool fixlands)
    {
        string deckCommander = "";
        deckCommander = commander.Trim();
        Card CommanderCard = null;
        List<string> deck = deckString.Split(new string[] { "\n" }, StringSplitOptions.None).ToList();
        deck.Add(commander);
        List<Identifier> identifiers = new List<Identifier>();
        Dictionary<string, object> data = new Dictionary<string, object>();
        List<Call> calls = new List<Call>();
        List<List<Card>> cards = new List<List<Card>>();
        List<Card> currentList = new List<Card>();

        //List<Card> tokens = new List<Card>();
        int cardI = 1;
        foreach (string cardLine in deck)
        {
            if (string.IsNullOrEmpty(cardLine))
            {
                if (currentList.Count > 0)
                    cards.Add(currentList);
                currentList = new List<Card>();
                continue;
            }
            try
            {
                int count = 1;
                string name = cardLine.Trim();
                if (cardLine.Contains(" ") && int.TryParse(cardLine.Split(' ')[0], out int derp))
                {
                    count = Convert.ToInt32(cardLine.Substring(0, cardLine.IndexOf(' ')));
                    name = cardLine.Substring(cardLine.IndexOf(' ') + 1);
                }
                //lands
                /* if (badnames.Contains(name.Trim().ToLower()))
                     continue;*/
                if (!identifiers.Any(p => p.name == name))
                    identifiers.Add(new Identifier() { name = name });
                /* if (!string.IsNullOrEmpty(deckCommander))
                     if (name == deckCommander)
                         continue;*/
                Card c = new Card()
                {

                    //CardID = cardI++ * 100,
                    count = count,
                    Nickname = name,
                    BackURL = "https://i.imgur.com/HQP9ISc.png".Trim(),
                };
                if (!string.IsNullOrEmpty(deckCommander))
                {
                    if (name == deckCommander)
                        CommanderCard = c;
                    else
                    {
                        //c.CardID = cardI++ * 100;
                        currentList.Add(c);
                    }
                }
                else
                {
                    //c.CardID = cardI++ * 100;
                    currentList.Add(c);
                }
                if (identifiers.Count > 70)
                {
                    Call call = new Call() { identifiers = identifiers };
                    calls.Add(call);
                    data = new Dictionary<string, object>();
                    identifiers = new List<Identifier>();
                }
            }
            catch
            {
                if (currentList.Count > 0)
                    cards.Add(currentList);
                currentList = new List<Card>();
            }
        }
        if (currentList.Count > 0)
            cards.Add(currentList);
        if (identifiers.Count > 0)
        {
            Call call = new Call() { identifiers = identifiers };
            calls.Add(call);
            data = new Dictionary<string, object>();
        }
        List<Card> tokens = new List<Card>();//tokens!

        List<string> tokenSearchIds = new List<string>();
        string jsondata1 = JsonConvert.SerializeObject(calls.First());
        string jsondata2 = JsonConvert.SerializeObject(calls.Last());
        for (int i2 = 0; i2 < calls.Count; i2++)
        {
            var cli = new HttpClient();
            string content = "";
            if (i2 == 0)
            {
                var buffer = System.Text.Encoding.UTF8.GetBytes(jsondata1);
                var byteContent = new ByteArrayContent(buffer);
                byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                var asdf = await cli.PostAsync("https://api.scryfall.com/cards/collection", byteContent);
                content = await asdf.Content.ReadAsStringAsync();
            }
            else
            {
                var buffer = System.Text.Encoding.UTF8.GetBytes(jsondata2);
                var byteContent = new ByteArrayContent(buffer);
                byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                var asdf = await cli.PostAsync("https://api.scryfall.com/cards/collection", byteContent);
                content = await asdf.Content.ReadAsStringAsync();
            }
            List<string> notfound = new List<string>();

            JObject jsonResponse = JObject.Parse(content);
            foreach (var selection in jsonResponse["not_found"])
                foreach (var card in selection)
                    notfound.Add(card.First.ToString());
            foreach (var card in jsonResponse["data"])
            {
                string url = "";

                string name = card["name"].ToString();
                if (name.Contains("/"))
                    name = name.Split('/')[0];
                if (card["card_faces"] != null && card["image_uris"] == null)
                {
                    for (int i = 0; i < card["card_faces"].Count(); i++)
                    {
                        var cardInfo = card["card_faces"][i];
                        if (i == 0)
                        {
                            url = cardInfo["image_uris"]["large"].ToString();
                            name = cardInfo["name"].ToString();
                        }
                        else
                        {
                            //needs to check if it has image uris

                            Card c = new Card()
                            {
                                Nickname = cardInfo["name"].ToString(),
                                count = 1,
                                imgurl = cardInfo["image_uris"]["large"].ToString()
                            };
                            tokens.Add(c);
                        }
                    }
                }
                else
                    url = card["image_uris"]["large"].ToString();


                string manacost = "0";

                int cmc = 0;
                JArray colorid = new JArray();

                try
                {
                    manacost = card["mana_cost"].ToString();
                    cmc = Convert.ToInt32(card["cmc"].ToString());
                    colorid = (JArray)card["color_identity"];
                }
                catch { }
                if (name.StartsWith("Kala"))
                {

                }
                name = name.ToLower().Trim();
                foreach (List<Card> stack in cards)
                {
                    foreach (Card setcard in stack.Where(p => name.Contains(p.fixed_name()) || name.Contains(p.fixed_split_name())))
                    {
                        setcard.imgurl = url;
                        setcard.cmc = cmc;
                        foreach (Card.CMCColor c in Enum.GetValues(typeof(Card.CMCColor)))
                        {
                            setcard.imgurl = url;
                            setcard.cmc = cmc;

                            if (setcard.colors.ContainsKey(c))
                                continue;
                            if (cmc > 0)
                            {
                                //not a land
                                int count = manacost.Count(p => p == c.ToString()[0]);
                                if (count > 0)
                                    setcard.colors.Add(c, count);
                            }
                            else
                            {
                                //is a land. get its colors!
                                if (colorid.Any(p => p.ToString() == c.ToString()))
                                {
                                    setcard.colors.Add(c, 0);
                                }
                            }
                        }
                    }
                }
                if (deckCommander.ToLower().Trim() == name)
                    CommanderCard.imgurl = url;
                //check for tokens
                if (card["all_parts"] != null)
                    foreach (var part in card["all_parts"])
                        if (part["component"].ToString() == "token")
                            tokenSearchIds.Add(part["id"].ToString());
            }

        }

        //token search
        if (tokenSearchIds.Count > 1)
        {
            System.Threading.Thread.Sleep(100);
            List<Dictionary<string, string>> tokenidentifiers = new List<Dictionary<string, string>>();
            foreach (string t in tokenSearchIds)
            {
                Dictionary<string, string> tok = new Dictionary<string, string>();
                tok.Add("id", t);
                tokenidentifiers.Add(tok);
            }
            Dictionary<string, object> tokenD = new Dictionary<string, object>();
            tokenD.Add("identifiers", tokenidentifiers);
            string jsondata = JsonConvert.SerializeObject(tokenD);
            HttpWebRequest request = System.Net.WebRequest.Create("https://api.scryfall.com/cards/collection") as HttpWebRequest;
            request.Method = "POST";
            request.ContentType = "application/json";
            ASCIIEncoding encoding = new ASCIIEncoding();
            byte[] byte1 = encoding.GetBytes(jsondata);
            request.ContentLength = byte1.Length;
            Stream newStream = request.GetRequestStream();
            newStream.Write(byte1, 0, byte1.Length);
            List<string> notfound = new List<string>();
            Dictionary<string, string> CardAndURL = new Dictionary<string, string>();
            using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
            {
                Stream receiveStream = response.GetResponseStream();
                StreamReader readStream = null;
                if (response.CharacterSet == null || response.CharacterSet == "")
                    readStream = new StreamReader(receiveStream);
                else
                    readStream = new StreamReader(receiveStream, Encoding.GetEncoding(response.CharacterSet));
                string content = readStream.ReadToEnd();
                JObject jsonResponse = JObject.Parse(content);
                foreach (var card in jsonResponse["data"])
                {
                    string url = card["image_uris"]["large"].ToString();
                    string name = card["name"].ToString();
                    if (!tokens.Any(p => p.Nickname == name))
                        tokens.Add(new Card()
                        {
                            imgurl = url,
                            Nickname = name,
                            //CardID = cardI++ * 100,
                            count = 1,

                        });

                }
            }

        }
        if (tokens.Count > 0)
            cards.Add(tokens);
        if (CommanderCard != null)
            tokens.Add(CommanderCard);
        /*  if (CommanderCard != null)
          {
              //CommanderCard.CardID = cardI++ * 100;
              List<Card> commander = new List<Card>();
              commander.Add(CommanderCard);
              cards.Add(commander);
          }*/


        TabletopDeck final = new TabletopDeck(cards, false, fixlands);
        string output = JsonConvert.SerializeObject(final, Formatting.Indented);
        return output;
    }
}
