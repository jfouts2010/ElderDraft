@page "/aylmao"
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Globalization
@using System.Net
@using System.Web
@using System.Threading.Tasks
@using System.IO
@using System.Text
@inject HttpClient Http
    <style>
        img.c {
            width: 10vw;
        }
    </style>

<table>
    <tr>
        <th valign="top">
            <select name="set1" id="set1" @bind="@set1">
                @foreach (string todo in GetSets())
                {

                    <option value=@todo>@todo</option>
                }
            </select>
            <br>
            <br>
            <select name="set2" id="set2" @bind="@set2">
                @foreach (string todo in GetSets())
                {

                    <option value=@todo>@todo</option>
                }
            </select>
            <br>
            <br>
            <select name="set3" id="set3" @bind="@set3">
                @foreach (string todo in GetSets())
                {
                    <option value=@todo>@todo</option>
                }
            </select>
            <br>
            <br>
            <input type="text" id="setsInput" name="setsInput" @bind="@setQuery">
            <br>
            <br>
            <button class="btn btn-primary" @onclick="Submit">Submit</button>

        </th>
        <th>
            <table>
                <tr>
                    <th>
                        <img class="c" src=@imgurl @onclick="SelectCard">
                    </th>
                    <th>
                        <img class="c" src=@imgurl>
                    </th>
                    <th>
                        <img class="c" src=@imgurl>
                    </th>
                    <th>
                        <img class="c" src=@imgurl>
                    </th>
                    <th>
                        <img class="c" src=@imgurl>
                    </th>
                </tr>
            </table>
        </th>
    </tr>
</table>
@code {

    string imgurl = "https://tcgplayer-cdn.tcgplayer.com/product/188513_200w.jpg";
    string set1 = "";
    string set2 = "";
    string set3 = "";
    string setQuery = "-type:basic (set:tpr OR set:dtk OR set:rix)";
    public void Nothing() { }
    public List<string> GetSets()
    {
        string setsjsonstring = new Data().Sets;

        JObject setsjo = JObject.Parse(setsjsonstring);
        Dictionary<string, DateTime> setsRelease = new Dictionary<string, DateTime>();
        foreach (var set in setsjo["data"])
        {
            string set_type = set["set_type"].ToString();
            if (set_type == "core" || set_type == "expansion" || set_type == "commander" || set_type == "masters")
                setsRelease.Add(set["code"].ToString() + ": " + set["name"].ToString(), DateTime.ParseExact(set["released_at"].ToString(), "yyyy-MM-dd", CultureInfo.InvariantCulture));
        }
        return setsRelease.OrderBy(p => p.Value).Select(p => p.Key).ToList();
    }
    public void SelectCard()
    {

    }
    public async void Submit()
    {
        int page = 1;
        List<Card> CubeCards = new List<Card>();
        if (string.IsNullOrEmpty(setQuery))
        {
            setQuery = "-type:basic (set:" + set1.Split(new string[] { ":" }, StringSplitOptions.None)[0];
            if (!string.IsNullOrEmpty(set2))
                setQuery += " OR set:" + set2.Split(new string[] { ":" }, StringSplitOptions.None)[0];
            if (!string.IsNullOrEmpty(set3))
                setQuery += " OR set:" + set3.Split(new string[] { ":" }, StringSplitOptions.None)[0];
            setQuery += ")";
        }
        while (true)
        {
            string query = "https://api.scryfall.com/cards/search?q=" + HttpUtility.UrlEncode(setQuery) + "&order=edhrec&page=" + page;
            /*  HttpWebRequest request = System.Net.WebRequest.Create(query) as HttpWebRequest;
              request.Method = "GET";
              using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)*/
            {
                var response = await Http.GetStringAsync(query);
                /*Stream receiveStream = response.GetResponseStream();
                StreamReader readStream = null;
                if (response.CharacterSet == null || response.CharacterSet == "")
                    readStream = new StreamReader(receiveStream);
                else
                    readStream = new StreamReader(receiveStream, Encoding.GetEncoding(response.CharacterSet));*/

                string content = response;//readStream.ReadToEnd();

                JObject jsonResponse = JObject.Parse(content);
                foreach (JToken card in jsonResponse["data"])
                {
                    Card newCard = JsonToCard(card);
                    if (newCard != null)
                        CubeCards.Add(newCard);
                }
                //progressBar1.Value = (int)((decimal)CubeCards.Count / decimal.Parse(jsonResponse["total_cards"].ToString()) * 100M) / 2;
                if (jsonResponse["data"].Count() < 175)
                    break;
                page++;
            }
        }
        imgurl = CubeCards.First().lowresimgurl;
        StateHasChanged();
    }
    public Card JsonToCard(JToken card)
    {
        Card setcard = new Card();
        try
        {
            int rank = int.Parse(card["edhrec_rank"].ToString());
            if (rank > 8000)
                return null;
            setcard.rank = rank;
        }
        catch { return null; }
        string url = "";
        string lowresurl = "";
        string name = card["name"].ToString();

        if (name.Contains("/"))
            name = name.Split('/')[0];
        if (card["card_faces"] != null && card["image_uris"] == null)
        {
            for (int i = 0; i < card["card_faces"].Count(); i++)
            {
                var cardInfo = card["card_faces"][i];
                if (i == 0)
                {
                    url = cardInfo["image_uris"]["large"].ToString();
                    lowresurl = cardInfo["image_uris"]["normal"].ToString();
                    name = cardInfo["name"].ToString();
                }
                else
                {
                    //needs to check if it has image uris

                    Card c = new Card()
                    {
                        Nickname = cardInfo["name"].ToString(),
                        count = 1,
                        imgurl = cardInfo["image_uris"]["large"].ToString()
                    };
                    //tokens.Add(c);
                }
            }
        }
        else
        {
            url = card["image_uris"]["large"].ToString();
            lowresurl = card["image_uris"]["normal"].ToString();
        }


        string manacost = "0";

        int cmc = 0;
        JArray colorid = new JArray();

        try
        {
            manacost = card["mana_cost"].ToString();
            cmc = Convert.ToInt32(card["cmc"].ToString());
            colorid = (JArray)card["color_identity"];
        }
        catch { }
        name = name.ToLower().Trim();

        setcard.type = card["type_line"].ToString();
        setcard.imgurl = url;
        setcard.lowresimgurl = lowresurl;
        setcard.Nickname = name;
        setcard.cmc = cmc;
        setcard.rarity = card["rarity"].ToString();
        setcard.Name = "Card";
        setcard.count = 1;
        foreach (Card.CMCColor c in Enum.GetValues(typeof(Card.CMCColor)))
        {
            setcard.imgurl = url;
            setcard.lowresimgurl = lowresurl;
            setcard.cmc = cmc;

            if (setcard.colors.ContainsKey(c))
                continue;
            if (cmc > 0)
            {
                //not a land
                int count = manacost.Count(p => p == c.ToString()[0]);
                if (count > 0)
                    setcard.colors.Add(c, count);
            }
            else
            {
                //is a land. get its colors!
                if (colorid.Any(p => p.ToString() == c.ToString()))
                {
                    setcard.colors.Add(c, 0);
                }
            }
        }
        return setcard;
    }
}
