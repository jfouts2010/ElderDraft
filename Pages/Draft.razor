@page "/Draft"
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Globalization
@using System.Net
@using System.Web
@using System.Threading.Tasks
@using System.IO
@using System.Text
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject NavigationManager navManager
<style>

    img {
        transition: transform 0.25s ease;
    }

        img:hover {
            -webkit-transform: scale(1.5); /* or some other value */
            transform: scale(1.5);
        }
</style>
<progress id="file" value="@progress" max="100"></progress>
<table>
    <tr>
        <th valign="top">
            <button class="btn btn-primary" @onclick="SelectCards" style="visibility: @confirmButton;">Confirm</button>
        </th>
        <th valign="top">
            <table>
                <tr>
                    @for (int i = 0; i < 5; i++)
                    {
                        var buttonNumber = i;
                        <th>
                            <img src=@(CurrentPack.Count > i ? CurrentPack[i].lowresimgurl : "") @onclick="@(e => SelectCard(e, buttonNumber))" style="@buttonStyle[i]">
                        </th>
                    }
                </tr>
                <tr>
                    @for (int i = 5; i < 10; i++)
                    {
                        var buttonNumber = i;
                        <th>
                            <img src=@(CurrentPack.Count > i ? CurrentPack[i].lowresimgurl : "") @onclick="@(e => SelectCard(e, buttonNumber))" style="@buttonStyle[i]">
                        </th>
                    }
                </tr>
                <tr>
                    @for (int i = 10; i < 15; i++)
                    {
                        var buttonNumber = i;
                        <th>
                            <img src=@(CurrentPack.Count > i ? CurrentPack[i].lowresimgurl : "") @onclick="@(e => SelectCard(e, buttonNumber))" style="@buttonStyle[i]">
                        </th>
                    }
                </tr>
                <tr>
                    @for (int i = 15; i < 20; i++)
                    {
                        var buttonNumber = i;
                        <th>
                            <img src=@(CurrentPack.Count > i ? CurrentPack[i].lowresimgurl : "") @onclick="@(e => SelectCard(e, buttonNumber))" style="@buttonStyle[i]">
                        </th>
                    }
                </tr>
            </table>
        </th>
    </tr>
</table>
@code {
    public int currentPackCount = 0;
    public List<List<List<Card>>> allPacks = new List<List<List<Card>>>();
    public List<Card> CurrentPack = new List<Card>();
    public string confirmButton = "hidden";
    public int progress = 0;
    public static string styleDefault = "width: 10vw;";
    public static string styleSelected = "width: 10vw;border-width: .5vw;border-style: solid; border-color: SlateBlue;";
    Dictionary<int, string> buttonStyle = new Dictionary<int, string>();
    List<int> selectedCards = new List<int>();
    List<Card> Deck = new List<Card>();
    string setQuery = "";
    int packSelection = 0;

    protected override async Task OnInitializedAsync()
    {
        await Startup();
        Submit();
    }
    Task Startup()
    {
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("query", out var param))
        {
            setQuery = param.First();
        }

        for (int i = 0; i < 20; i++)
        {
            buttonStyle.Add(i, styleDefault);
        }
        return Task.CompletedTask;
    }

    public void SelectCard(MouseEventArgs e, int cardNumber)
    {
        if (selectedCards.Contains(cardNumber))
        {
            selectedCards.Remove(cardNumber);
            buttonStyle[cardNumber] = styleDefault;
        }
        else if (selectedCards.Count < 2)
        {
            selectedCards.Add(cardNumber);
            buttonStyle[cardNumber] = styleSelected;
        }
        if (selectedCards.Count == 2)
            confirmButton = "visible";
        else
            confirmButton = "hidden";
    }
    async void Submit()
    {
        int page = 1;
        List<Card> CubeCards = new List<Card>();

        while (true)
        {
            string query = "https://api.scryfall.com/cards/search?q=" + HttpUtility.UrlEncode(setQuery) + "&order=edhrec&page=" + page;
            {
                string content = await Http.GetStringAsync(query);
                JObject jsonResponse = JObject.Parse(content);
                foreach (JToken card in jsonResponse["data"])
                {
                    Card newCard = JsonToCard(card);
                    if (newCard != null)
                        CubeCards.Add(newCard);
                }
                progress = (int)((decimal)CubeCards.Count / decimal.Parse(jsonResponse["total_cards"].ToString()) * 100M);
                StateHasChanged();
                if (jsonResponse["data"].Count() < 175)
                    break;
                page++;
            }
        }
        for (int i2 = 0; i2 < 3; i2++)
        {
            CubeCards.AddRange(CommanderClassic());
            List<Card> Myth = CubeCards.Where(p => p.rarity == "mythic").ToList();
            List<Card> rare = CubeCards.Where(p => p.rarity == "rare").ToList();
            List<Card> uncom = CubeCards.Where(p => p.rarity == "uncommon").ToList();
            List<Card> common = CubeCards.Where(p => p.rarity == "common").ToList();
            List<Card> legendaries = CubeCards.Where(p => p.type.Contains("Legendary") && p.type.Contains("Creature")).ToList();
            List<Card> partners = AddPartners();
            legendaries.AddRange(partners);
            Random r = new Random();
            List<List<Card>> Packs = new List<List<Card>>();
            List<Card> cardsInPacks = new List<Card>();
            for (int i = 0; i < 8; i++)
            {
                List<Card> packCards = new List<Card>();

                //legendaries
                for (int l = 0; l < 2; l++)
                {
                    bool myth = false;
                    List<Card> availLegendaries = legendaries.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p)).ToList();
                    if (myth)
                        availLegendaries = availLegendaries.Where(p => p.rarity != "mythic").ToList();
                    Card c = availLegendaries[r.Next(0, availLegendaries.Count())];
                    if (c.rarity == "mythic")
                        myth = true;
                    packCards.Add(c);
                }
                //rare/myth slot
                for (int l = 0; l < 6; l++)
                {
                    bool myth = false;
                    bool gotMyth = r.Next(0, 100) > 86;
                    if (!myth && gotMyth)
                    {
                        List<Card> availMyth = Myth.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p)).ToList();
                        Card c = availMyth[r.Next(0, availMyth.Count())];
                        myth = true;
                        packCards.Add(c);
                    }
                    else
                    {
                        List<Card> availRare = rare.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p)).ToList();
                        Card c = availRare[r.Next(0, availRare.Count())];
                        packCards.Add(c);
                    }
                }
                //uncommons
                for (int l = 0; l < 8; l++)
                {
                    List<Card> availuncomm = uncom.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p)).ToList();
                    Card c = availuncomm[r.Next(0, availuncomm.Count())];
                    packCards.Add(c);
                }
                //commons
                for (int l = 0; l < 4; l++)
                {
                    List<Card> availcommon = common.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p)).ToList();
                    Card c = availcommon[r.Next(0, availcommon.Count())];
                    packCards.Add(c);
                }
                Packs.Add(packCards);
                cardsInPacks.AddRange(packCards);
                //progressBar1.Value = 50 + 6 * i;
            }
            allPacks.Add(Packs);
        }
        //LoadPack(allPacks[0][currentPackCount]);
        CurrentPack = allPacks[0][currentPackCount];
        progress = 100;
        StateHasChanged();
    }
    public void SelectCards()
    {
        Card pick1 = CurrentPack[selectedCards[0]];
        Card pick2 = CurrentPack[selectedCards[1]];
        Deck.Add(pick1);
        Deck.Add(pick2);
        CurrentPack.Remove(pick1);
        CurrentPack.Remove(pick2);
        confirmButton = "hidden";
        buttonStyle[selectedCards[0]] = styleDefault;
        buttonStyle[selectedCards[1]] = styleDefault;
        selectedCards.Clear();
        //richTextBox1.Text = string.Join("\n", Deck.Select(p => p.Nickname));
        currentPackCount++;
        if (currentPackCount == 8)
            currentPackCount = 0;
        //code to go through each pack for bot picks
        for (int i = 0; i < 8; i++)
        {
            List<Card> pack = allPacks[packSelection][i];
            if (pack == CurrentPack)
                continue;
            Card botpick1 = pack.OrderBy(p => p.rank).ToList()[0];
            Card botpick2 = pack.OrderBy(p => p.rank).ToList()[1];
            pack.Remove(botpick1);
            pack.Remove(botpick2);
        }
        CurrentPack = new List<Card>();
        StateHasChanged();
        CurrentPack = allPacks[packSelection][currentPackCount];
        if (CurrentPack.Count() == 0)
        {
            packSelection++;
            CurrentPack = allPacks[packSelection][currentPackCount];
        }
        StateHasChanged();
    }
    public Card JsonToCard(JToken card)
    {
        Card setcard = new Card();
        try
        {
            int rank = int.Parse(card["edhrec_rank"].ToString());
            if (rank > 8000)
                return null;
            setcard.rank = rank;
        }
        catch { return null; }
        string url = "";
        string lowresurl = "";
        string name = card["name"].ToString();

        if (name.Contains("/"))
            name = name.Split('/')[0];
        if (card["card_faces"] != null && card["image_uris"] == null)
        {
            for (int i = 0; i < card["card_faces"].Count(); i++)
            {
                var cardInfo = card["card_faces"][i];
                if (i == 0)
                {
                    url = cardInfo["image_uris"]["large"].ToString();
                    lowresurl = cardInfo["image_uris"]["normal"].ToString();
                    name = cardInfo["name"].ToString();
                }
                else
                {
                    Card c = new Card()
                    {
                        Nickname = cardInfo["name"].ToString(),
                        count = 1,
                        imgurl = cardInfo["image_uris"]["large"].ToString()
                    };
                }
            }
        }
        else
        {
            url = card["image_uris"]["large"].ToString();
            lowresurl = card["image_uris"]["normal"].ToString();
        }

        string manacost = "0";

        int cmc = 0;
        JArray colorid = new JArray();

        try
        {
            manacost = card["mana_cost"].ToString();
            cmc = Convert.ToInt32(card["cmc"].ToString());
            colorid = (JArray)card["color_identity"];
        }
        catch { }
        name = name.ToLower().Trim();

        setcard.type = card["type_line"].ToString();
        setcard.imgurl = url;
        setcard.lowresimgurl = lowresurl;
        setcard.Nickname = name;
        setcard.cmc = cmc;
        setcard.rarity = card["rarity"].ToString();
        setcard.Name = "Card";
        setcard.count = 1;
        foreach (Card.CMCColor c in Enum.GetValues(typeof(Card.CMCColor)))
        {
            setcard.imgurl = url;
            setcard.lowresimgurl = lowresurl;
            setcard.cmc = cmc;

            if (setcard.colors.ContainsKey(c))
                continue;
            if (cmc > 0)
            {
                //not a land
                int count = manacost.Count(p => p == c.ToString()[0]);
                if (count > 0)
                    setcard.colors.Add(c, count);
            }
            else
            {
                //is a land. get its colors!
                if (colorid.Any(p => p.ToString() == c.ToString()))
                {
                    setcard.colors.Add(c, 0);
                }
            }
        }
        return setcard;
    }
    public List<Card> CommanderClassic()
    {
        string cc = new Data().CommanderStaples;

        List<Card> CCCards = new List<Card>();

        JObject jsonResponse = JObject.Parse(cc);

        foreach (var card in jsonResponse["data"])
        {
            Card card2 = JsonToCard(card);
            if (card2.rarity == "mythic" || card2.rarity == "rare")
                card2.rarity = "uncommon";
            CCCards.Add(card2);
        }
        return CCCards;
    }
    public List<Card> AddPartners()
    {
        List<Card> partners = new List<Card>();
        string partnersjsonstring = new Data().Partners;
        JObject partnersjo = JObject.Parse(partnersjsonstring);
        foreach (var card in partnersjo["data"])
        {
            Card newCard = JsonToCard(card);
            if (newCard != null)
                partners.Add(newCard);
        }
        return partners;
    }
}
