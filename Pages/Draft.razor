@page "/Draft"
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Globalization
@using System.Net
@using System.Web
@using System.Threading.Tasks
@using System.IO
@using System.Text
@using Microsoft.AspNetCore.WebUtilities
@using Radzen.Blazor
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager navManager
@inject IJSRuntime JSRuntime
<style>

    img {
        transition: transform 0.25s ease;
    }

        img:hover {
            -webkit-transform: scale(1.5); /* or some other value */
            transform: scale(1.5);
        }
</style>
@themesReadable
<div style="display: @(loading ? "none" : "inline");">
    <h3 id="error" style="color:red">@error</h3>
    <table align="center">
        <tr>
            <th style="width:800px;" align="center">
                <RadzenChart Style="width: 100%">
                    <RadzenPieSeries Data="@colordata" Fills="@(new [] { "#e8e8cc", "#4179e0", "#000000", "#eb0027", "#19691d" })" Title="Color Count" CategoryProperty="Color" ValueProperty="Count" />
                    <RadzenLegend Visible="false" />
                </RadzenChart>
            </th>
            <th style="width:800px;" align="center">
                <RadzenChart>
                    <RadzenColumnSeries Data="@cmcdata" CategoryProperty="CMC" Title="Count" ValueProperty="Count" />
                    <RadzenColumnOptions Margin="0" />
                    <RadzenValueAxis />
                    <RadzenLegend Visible="false" />
                </RadzenChart>
            </th>
            <th style="width:800px;" align="center">
                <RadzenChart>
                    <RadzenColumnSeries Data="@typedata" CategoryProperty="Type" Title="Count" ValueProperty="Count" />
                    <RadzenColumnOptions Margin="0" />
                    <RadzenValueAxis />
                    <RadzenLegend Visible="false" />
                </RadzenChart>
            </th>
        </tr>
    </table>
    <div id="Draft" style="display:  @(!Pick ? "none" : "inline");">
        <div align="center">
            <button class="btn btn-primary" @onclick="SelectCards" style="visibility: @confirmButton;">Confirm</button>
        </div>
        <br />
        <br />
        <table align="center">
            <tr>
                <td colspan="5" style="text-align:center;">
                    Sort by
                    <select id="sortorder" @onchange="@(e => ChangeSortOrder(e))">
                        <option value="@SortTypes.Popularity">Popularity</option>
                        <option value="@SortTypes.Rarity">Rarity</option>
                        <option value="@SortTypes.Price">$ Price</option>
                        <option value="@SortTypes.CMC">CMC</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td colspan="5" style="text-align:center">
                    Order Legal Colors
                </td>
            </tr>

            <tr>
                <th valign="top">
                    <table>
                        <tr>
                            <td>
                                <label for="White">White <input type="checkbox" value="White" id="White" name="White" @onchange="@(e => ChangeSortColor(e,  Card.CMCColor.W))" /></label>
                            </td>
                            <td>
                                <label for="Blue">Blue <input type="checkbox" value="Blue" id="Blue" name="Blue" @onchange="@(e => ChangeSortColor(e, Card.CMCColor.U))" /></label>
                            </td>
                            <td>
                                <label for="Black">Black <input type="checkbox" value="Black" id="Black" name="Black" @onchange="@(e => ChangeSortColor(e,  Card.CMCColor.B))" /></label>
                            </td>
                            <td>
                                <label for="Green">Green <input type="checkbox" value="Green" id="Green" name="Green" @onchange="@(e => ChangeSortColor(e,  Card.CMCColor.G))" /></label>
                            </td>
                            <td>
                                <label for="Red">Red <input type="checkbox" value="Red" id="Red" name="Red" @onchange="@(e => ChangeSortColor(e,  Card.CMCColor.R))" /></label>
                            </td>
                        </tr>
                        @for (int i = 0; i < CurrentPack.Count; i++)
                        {
                            <tr>
                                @for (; i < CurrentPack.Count; i++)
                                {
                                    var buttonNumber = i;
                                    <th>
                                        <img src=@(CurrentPack.Count > i ? CurrentPack[i].lowresimgurl : "") @onclick="@(e => SelectCard(e, buttonNumber))" style="@buttonStyle[i]">
                                    </th>
                                    @if ((i + 1) % 5 == 0)
                                    {
                                        break;
                                    }
                                }
                            </tr>
                        }
                    </table>
                </th>
            </tr>
        </table>
    </div>
    <div id="Deck" style="display: @(Pick ? "none" : "inline");">
        <div id="Deck" style="display: @(SideBoard ? "none" : "inline");">
            <h3 align="center">Main Deck</h3>
            <div align="center">
                <button class="btn btn-primary" @onclick="GoToDeck">Main Deck (@Deck.Count)</button>
                <button class="btn btn-default" @onclick="GoToSideboard">Sideboard (@SideBoardDeck.Count)</button>
                <input id="fixlands" type="checkbox" @onclick="SwapFixLands" /><label for="fixlands">Fix Lands</label>
                <button class="btn btn-primary" @onclick="DownloadFile">Export</button>
            </div>
            <br />
            <br />
            <table align="center">
                <tr>
                    <td colspan="5" style="text-align:center;">
                        Sort by
                        <select id="sortorder" @onchange="@(e => ChangeSortOrder(e))">
                            <option value="@SortTypes.Popularity">Popularity</option>
                            <option value="@SortTypes.Rarity">Rarity</option>
                            <option value="@SortTypes.Price">$ Price</option>
                            <option value="@SortTypes.CMC">CMC</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="White">White <input type="checkbox" value="White" id="White" name="White" @onchange="@(e => ChangeSortColor(e,  Card.CMCColor.W))" /></label>
                        <label for="Blue">Blue <input type="checkbox" value="Blue" id="Blue" name="Blue" @onchange="@(e => ChangeSortColor(e, Card.CMCColor.U))" /></label>
                    </td>
                    <td>
                        <label for="Black">Black <input type="checkbox" value="Black" id="Black" name="Black" @onchange="@(e => ChangeSortColor(e,  Card.CMCColor.B))" /></label>
                        <label for="Green">Green <input type="checkbox" value="Green" id="Green" name="Green" @onchange="@(e => ChangeSortColor(e,  Card.CMCColor.G))" /></label>
                        <label for="Red">Red <input type="checkbox" value="Red" id="Red" name="Red" @onchange="@(e => ChangeSortColor(e,  Card.CMCColor.R))" /></label>
                    </td>
                </tr>
                <tr>
                    <th valign="top">
                        <textarea style="height: 500px;width: 20vw;overflow: auto;">
                        @foreach (string card in cardList)
                        {
                            @(card + "\n")
                        }
                    </textarea>
                    </th>
                    <th>
                        <table valign="top">
                            @for (int i2 = 0; i2 < 12; i2++)
                            {
                                <tr valign="top">
                                    @for (int i = 0 + i2 * 5; i < 5 + i2 * 5; i++)
                                    {
                                        var buttonNumber = i;
                                        <th valign="top">
                                            <img src=@(Deck.Count > i ? Deck[i].lowresimgurl : "") style="@styleDefault" @onclick="@(e => MoveToSideBoard(buttonNumber))">
                                        </th>
                                    }
                                </tr>
                            }
                        </table>
                    </th>
                </tr>
            </table>
        </div>
        <div id="Deck" style="display: @(SideBoard ? "inline" : "none");">
            <h3 align="center">Sideboard</h3>
            <div align="center">
                <button class="btn btn-default" @onclick="GoToDeck">Main Deck @Deck.Count</button>
                <button class="btn btn-primary" @onclick="GoToSideboard">Sideboard @SideBoardDeck.Count</button>
                <button class="btn btn-primary" @onclick="DownloadFile">Export</button>
            </div>
            <br />
            <br />
            <table align="center">
                <tr>
                    <th valign="top">
                        <textarea style="height: 500px;width: 20vw;overflow: auto;">
                        @foreach (string card in cardList)
                        {
                            @(card + "\n")
                        }
                    </textarea>
                    </th>
                    <th>
                        <table valign="top">
                            @for (int i2 = 0; i2 < 12; i2++)
                            {
                                <tr valign="top">
                                    @for (int i = 0 + i2 * 5; i < 5 + i2 * 5; i++)
                                    {
                                        var buttonNumber = i;
                                        <th valign="top">
                                            <img src=@(SideBoardDeck.Count > i ? SideBoardDeck[i].lowresimgurl : "") style="@styleDefault" @onclick="@(e => MoveToDeck(buttonNumber))">
                                        </th>
                                    }
                                </tr>
                            }
                        </table>
                    </th>
                </tr>
            </table>
        </div>
    </div>
</div>
<div style="display: @(loading ? "inline" : "none");">
    <div class="progress">
        <div class="progress-bar" role="progressbar" aria-valuenow="@progress"
             aria-valuemin="0" aria-valuemax="100" style="width:@(progress + "%")">
            @progress %
        </div>
    </div>
</div>
@code {
    public async void DownloadFile()
    {
        try
        {
            List<List<Card>> cards = new List<List<Card>>();
            cards.Add(Deck);
            cards.Add(SideBoardDeck);
            if (fixlands)
                DisplayError("Starting Download with Landfix");
            await JSRuntime.InvokeAsync<object>("FileSaveAs", "Deck - " + DateTime.Now.ToShortDateString().Replace('/', '-') + ".json", TabletopDeck.Create(cards, fixlands));
        }
        catch(Exception e)
        {
            DisplayError(e.Message + " - " + e.StackTrace);
        }
    }
    class ColorDataItem
    {
        public string Color { get; set; }
        public double Count { get; set; }
    }
    class CMCDataItem
    {
        public string CMC { get; set; }
        public double Count { get; set; }
    }
    class TypeDataItem
    {
        public string Type { get; set; }
        public double Count { get; set; }
    }

    ColorDataItem[] colordata = new ColorDataItem[] {
    };
    CMCDataItem[] cmcdata = new CMCDataItem[] {
    };
    TypeDataItem[] typedata = new TypeDataItem[] {
    };
    [CascadingParameter(Name = "Pick")]
    bool Pick { get; set; }
    [CascadingParameter(Name = "error")]
    string error { get; set; }
    [CascadingParameter(Name = "SideBoard")]
    bool SideBoard { get; set; }
    bool themedraft = false;
    bool loading = true;
    string themesReadable = "";
    public List<string> cardList = new List<string>();
    public int currentPackCount = 0;
    public List<List<List<Card>>> allPacks = new List<List<List<Card>>>();
    public List<Card> CurrentPack = new List<Card>();
    public string confirmButton = "hidden";
    public int progress = 0;
    public static string styleDefault = "width: 225px;";
    public static string styleSelected = "width: 225px;border-width: .5vw;border-style: solid; border-color: SlateBlue;";
    Dictionary<int, string> buttonStyle = new Dictionary<int, string>();
    List<int> selectedCards = new List<int>();
    bool fixlands = false;
    List<Card.CMCColor> orderColors = new List<Card.CMCColor>();
    public SortTypes currentSort = SortTypes.Popularity;
    public bool sortreverse = false;
    public bool debug = false;
    List<Card> BotCommanders = new List<Card>() { null, null, null, null, null, null, null };
    List<List<Card>> BotCards = new List<List<Card>>() { new List<Card>(), new List<Card>(), new List<Card>(), new List<Card>(), new List<Card>(), new List<Card>(), new List<Card>() };
    public enum SortTypes
    {
        Popularity = 1,
        Price = 2,
        Rarity = 3,
        CMC = 4,
    }
    static List<Card> Deck = new List<Card>();
    static List<Card> SideBoardDeck = new List<Card>();
    string setQuery = "";
    int packSelection = 0;

    protected override async Task OnInitializedAsync()
    {
        bool asfd = Pick;
        Pick = true;
        await Startup();
        Submit();
        await Task.CompletedTask;
    }
    class Theme
    {
        public string name;
        public List<string> cards;
    }
    Task Startup()
    {
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("query", out var param))
        {
            setQuery = param.First();
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("themeddraft", out var param1))
        {
            themedraft = bool.Parse(param1.First());
        }
        for (int i = 0; i < 20; i++)
        {
            buttonStyle.Add(i, styleDefault);
        }
        return Task.CompletedTask;
    }

    public void SelectCard(MouseEventArgs e, int cardNumber)
    {
        if (selectedCards.Contains(cardNumber))
        {
            selectedCards.Remove(cardNumber);
            buttonStyle[cardNumber] = styleDefault;
        }
        else if (selectedCards.Count < 2)
        {
            selectedCards.Add(cardNumber);
            buttonStyle[cardNumber] = styleSelected;
        }
        if (selectedCards.Count == 2)
            confirmButton = "visible";
        else
            confirmButton = "hidden";
    }

    public void ChangeSortColor(ChangeEventArgs e, Card.CMCColor color)
    {
        if (orderColors.Contains(color))
            orderColors.Remove(color);
        else
            orderColors.Add(color);
        UpdateCurrentPackOrder();
    }

    public void ChangeSortOrder(ChangeEventArgs e)
    {
        SortTypes newsort = (SortTypes)Enum.Parse(typeof(SortTypes), e.Value.ToString());
        if (newsort == currentSort)
            sortreverse = !sortreverse;
        else
            sortreverse = false;
        currentSort = newsort;
        UpdateCurrentPackOrder();
    }

    public void DisplayError(string err)
    {
        error= err;
        StateHasChanged();
    }

    public void UpdateCurrentPackOrder()
    {
        //do secondary sort... first? Logical.
        try
        {
            if (sortreverse)
            {
                switch (currentSort)
                {
                    case SortTypes.Popularity:
                        {
                            CurrentPack = CurrentPack.OrderByDescending(p => p.rank).ToList();
                            Deck = Deck.OrderByDescending(p => p.rank).ToList();
                            SideBoardDeck = SideBoardDeck.OrderByDescending(p => p.rank).ToList();
                            break;
                        }
                    case SortTypes.Price:
                        {
                            CurrentPack = CurrentPack.OrderBy(p => p.price).ToList();
                            Deck = Deck.OrderBy(p => p.price).ToList();
                            SideBoardDeck = SideBoardDeck.OrderBy(p => p.price).ToList();
                            break;
                        }
                    case SortTypes.CMC:
                        {
                            CurrentPack = CurrentPack.OrderBy(p => p.cmc).ToList();
                            Deck = Deck.OrderBy(p => p.cmc).ToList();
                            SideBoardDeck = SideBoardDeck.OrderBy(p => p.cmc).ToList();
                            //throw new Exception("Testing Errors!");
                            break;
                        }
                    case SortTypes.Rarity:
                        {
                            CurrentPack = CurrentPack.OrderBy(p => (int)p.rarity_enum).ToList();
                            Deck = Deck.OrderBy(p => (int)p.rarity_enum).ToList();
                            SideBoardDeck = SideBoardDeck.OrderBy(p => (int)p.rarity_enum).ToList();
                            break;
                        }
                }
            }
            else
            {
                switch (currentSort)
                {
                    case SortTypes.Popularity:
                        {
                            CurrentPack = CurrentPack.OrderBy(p => p.rank).ToList();
                            Deck = Deck.OrderBy(p => p.rank).ToList();
                            SideBoardDeck = SideBoardDeck.OrderBy(p => p.rank).ToList();
                            break;
                        }
                    case SortTypes.Price:
                        {
                            CurrentPack = CurrentPack.OrderByDescending(p => p.price).ToList();
                            Deck = Deck.OrderByDescending(p => p.price).ToList();
                            SideBoardDeck = SideBoardDeck.OrderByDescending(p => p.price).ToList();
                            break;
                        }
                    case SortTypes.CMC:
                        {
                            CurrentPack = CurrentPack.OrderByDescending(p => p.cmc).ToList();
                            Deck = Deck.OrderByDescending(p => p.cmc).ToList();
                            SideBoardDeck = SideBoardDeck.OrderByDescending(p => p.cmc).ToList();
                            //throw new Exception("Testing Errors!");
                            break;
                        }
                    case SortTypes.Rarity:
                        {
                            CurrentPack = CurrentPack.OrderByDescending(p => (int)p.rarity_enum).ToList();
                            Deck = Deck.OrderByDescending(p => (int)p.rarity_enum).ToList();
                            SideBoardDeck = SideBoardDeck.OrderByDescending(p => (int)p.rarity_enum).ToList();
                            break;
                        }
                }
            }

            if (orderColors.Count > 0)
            {
                CurrentPack = CurrentPack.OrderByDescending(p => p.colors.Keys.ToList().All(x => orderColors.Contains(x))).ToList();
                Deck = Deck.OrderByDescending(p => p.colors.Keys.ToList().All(x => orderColors.Contains(x))).ToList();
                SideBoardDeck = SideBoardDeck.OrderByDescending(p => p.colors.Keys.ToList().All(x => orderColors.Contains(x))).ToList();
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            DisplayError(e.Message + " - " + e.StackTrace);
        }
    }

    async void Submit()
    {
        int page = 1;
        List<Card> CubeCards = new List<Card>();

        if (!themedraft)
        {
            while (true)
            {
                string query = "https://api.scryfall.com/cards/search?q=" + HttpUtility.UrlEncode(setQuery) + "&order=edhrec&page=" + page;
                {
                    try
                    {
                        string content = await Http.GetStringAsync(query);
                        JObject jsonResponse = JObject.Parse(content);
                        foreach (JToken card in jsonResponse["data"])
                        {
                            Card newCard = JsonToCard(card);
                            if (newCard != null)
                                CubeCards.Add(newCard);
                        }
                        progress = (int)((decimal)CubeCards.Count / decimal.Parse(jsonResponse["total_cards"].ToString()) * 100M);
                        StateHasChanged();
                        if (jsonResponse["data"].Count() < 175)
                            break;
                    }
                    catch (Exception e)
                    {
                        await JSRuntime.InvokeAsync<object>("Alert", e.Message);
                    }

                    page++;
                }
            }
        }
        else
        {
            List<Theme> badThemes = new List<Theme>();
            badThemes = JsonConvert.DeserializeObject<List<Theme>>(new Data().ThemesString);
            badThemes.AddRange(JsonConvert.DeserializeObject<List<Theme>>(new Data().TribeString));
            List<Theme> Themes = new List<Theme>();
            foreach (Theme badtheme in badThemes)
            {
                if (!Themes.Any(p => p.name == badtheme.name))
                    Themes.Add(badtheme);
            }
            List<string> cardnames = new List<string>();
            List<string> themes = setQuery.Split(',').ToList();
            themesReadable = string.Join(',', themes.Select(p => p.Replace("/themes/", "").Replace("/tribes/", "")));
            int count = 1;
            foreach (string themeName in themes)
            {
                Theme t = Themes.First(p => p.name == themeName);
                //pull from github
                var cli = new HttpClient();
                var asdf = await cli.GetAsync("https://raw.githubusercontent.com/thatsgerman/ElderDraft/master/big_data/" + themeName.Replace("/themes/", "").Replace("/tribes/", ""));
                string content = await asdf.Content.ReadAsStringAsync();
                JObject jsonResponse = JObject.Parse(content);
                foreach (var card in jsonResponse)
                {
                    string cardString = card.Value.ToString();
                    JToken cardjtokenConvert = JsonConvert.DeserializeObject<JToken>(cardString);
                    Card newCard = JsonToCard(cardjtokenConvert);
                    if (newCard != null)
                        CubeCards.Add(newCard);
                }
                progress = (int)(((decimal)count++ / (decimal)themes.Count()) * 100M);
                StateHasChanged();
                //cardnames.AddRange(t.cards);
            }

            /* List<Call> calls = new List<Call>();
             Call c = new Call();
             c.identifiers = new List<Identifier>();
             foreach (string cardLine in cardnames.Distinct().ToList())
             {
                 Identifier i = new Identifier();
                 i.name = cardLine;
                 if (c.identifiers.Count == 75)
                 {
                     calls.Add(c);
                     c = new Call();
                     c.identifiers = new List<Identifier>();
                     c.identifiers.Add(i);
                 }
                 else
                     c.identifiers.Add(i);
             }
             int callnumber = 0;
             while (callnumber < calls.Count)
             {
                 var cli = new HttpClient();
                 string content = "";
                 string jsondata1 = JsonConvert.SerializeObject(calls[callnumber]);
                 callnumber++;
                 var buffer = System.Text.Encoding.UTF8.GetBytes(jsondata1);
                 var byteContent = new ByteArrayContent(buffer);
                 byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                 var asdf = await cli.PostAsync("https://api.scryfall.com/cards/collection", byteContent);
                 content = await asdf.Content.ReadAsStringAsync();
                 JObject jsonResponse = JObject.Parse(content);
                 foreach (JToken card in jsonResponse["data"])
                 {
                     Card newCard = JsonToCard(card);
                     if (newCard != null)
                         CubeCards.Add(newCard);
                 }
                 progress = (int)(((decimal)callnumber * 75M / (decimal)cardnames.Distinct().Count()) * 100M);
                 StateHasChanged();
                 page++;
             }*/
        }
        //CubeCards.AddRange(CommanderClassic());
        CubeCards = RemoveBannedCards(CubeCards);
        for (int i2 = 0; i2 < 3; i2++)
        {
            /*List<Card> Myth = CubeCards.Where(p => p.rarity == "mythic").ToList();
            List<Card> rare = CubeCards.Where(p => p.rarity == "rare").ToList();
            List<Card> uncom = CubeCards.Where(p => p.rarity == "uncommon").ToList();
            List<Card> common = CubeCards.Where(p => p.rarity == "common").ToList();*/
            List<Card> legendaries = CubeCards.Where(p => p.type.Contains("Legendary") && p.type.Contains("Creature")).ToList();
            //List<Card> partners = AddPartners();
            //legendaries.AddRange(partners);
            Random r = new Random();
            List<List<Card>> Packs = new List<List<Card>>();
            List<Card> cardsInPacks = new List<Card>();

            for (int i = 0; i < 8; i++)
            {
                List<Card> packCards = new List<Card>();
                int lands = 0;
                bool banLands = lands >= 4;
                //legendaries
                for (int l = 0; l < 2; l++)
                {
                    bool myth = false;
                    List<Card> availLegendaries = legendaries.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p) && !p.type.ToLower().Contains("land")).ToList();
                    /* if (myth)
                         availLegendaries = availLegendaries.Where(p => p.rarity != "mythic").ToList();*/
                    Card c = availLegendaries[r.Next(0, availLegendaries.Count())];
                    /* if (c.rarity == "mythic")
                         myth = true;*/
                    packCards.Add(c);
                }
                //rare/myth slot
                /*  for (int l = 0; l < 6; l++)
                  {
                      bool myth = false;
                      bool gotMyth = r.Next(0, 100) > 86;
                      if (!myth && gotMyth)
                      {
                          List<Card> availMyth = Myth.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p)).ToList();
                          if (banLands)
                              availMyth = availMyth.Where(p => !p.type.ToLower().Contains("land")).ToList();
                          Card c = availMyth[r.Next(0, availMyth.Count())];
                          myth = true;
                          packCards.Add(c);
                          if (c.type.ToLower().Contains("land"))
                              lands++;
                      }
                      else
                      {
                          List<Card> availRare = rare.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p)).ToList();
                          if (banLands)
                              availRare = availRare.Where(p => !p.type.ToLower().Contains("land")).ToList();
                          Card c = availRare[r.Next(0, availRare.Count())];
                          packCards.Add(c);
                          if (c.type.ToLower().Contains("land"))
                              lands++;
                      }
                  }
                  //uncommons
                  for (int l = 0; l < 8; l++)
                  {
                      List<Card> availuncomm = uncom.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p)).ToList();
                      if (banLands)
                          availuncomm = availuncomm.Where(p => !p.type.ToLower().Contains("land")).ToList();
                      Card c = availuncomm[r.Next(0, availuncomm.Count())];
                      packCards.Add(c);
                      if (c.type.ToLower().Contains("land"))
                          lands++;
                  }
                  //commons
                  for (int l = 0; l < 4; l++)
                  {
                      List<Card> availcommon = common.Where(p => !packCards.Contains(p) && !cardsInPacks.Contains(p)).ToList();
                      if (banLands)
                          availcommon = availcommon.Where(p => !p.type.ToLower().Contains("land")).ToList();
                      Card c = availcommon[r.Next(0, availcommon.Count())];
                      packCards.Add(c);
                      if (c.type.ToLower().Contains("land"))
                          lands++;
                  }*/
                if (themedraft)
                {
                    for (int l = 0; l < 9; l++)
                    {
                        List<Card> availCards = CubeCards.Where(p => !packCards.Select(p => p.Nickname).ToList().Contains(p.Nickname)).ToList();
                        Card c = availCards[r.Next(0, availCards.Count())];

                        packCards.Add(c);
                        if (c.type.ToLower().Contains("land"))
                            lands++;

                    }
                    for (int l = 0; l < 9; l++)
                    {
                        List<string> TopCards = JsonConvert.DeserializeObject<List<string>>(new Data().TopCards);

                        List<Card> availCards = CubeCards.Where(p => !packCards.Select(p => p.Nickname).ToList().Contains(p.Nickname)).ToList();
                        availCards = availCards.Where(p => !TopCards.Contains(p.Nickname)).ToList();
                        Card c = availCards[r.Next(0, availCards.Count())];

                        packCards.Add(c);
                        if (c.type.ToLower().Contains("land"))
                            lands++;

                    }
                }
                else
                {
                    for (int l = 0; l < 18; l++)
                    {
                        List<Card> availCards = CubeCards.Where(p => !packCards.Select(p => p.Nickname).ToList().Contains(p.Nickname)).ToList();
                        Card c = availCards[r.Next(0, availCards.Count())];

                        packCards.Add(c);
                        if (c.type.ToLower().Contains("land"))
                            lands++;

                    }
                }
                Packs.Add(packCards);
                cardsInPacks.AddRange(packCards);
                //progressBar1.Value = 50 + 6 * i;
            }
            allPacks.Add(Packs);
        }
        //LoadPack(allPacks[0][currentPackCount]);
        CurrentPack = allPacks[0][currentPackCount];
        loading = false;
        progress = 100;
        StateHasChanged();

    }
    public List<Card> RemoveBannedCards(List<Card> cubeCards)
    {
        List<string> bannedcards = new List<string>() { "urza, lord high", "cyclonic rift", "fierce guardianship", "deadly rollick", "deflecting swat", "flawless maneuver" };
        cubeCards = cubeCards.Where(p => !bannedcards.Any(x => x.ToLower() == p.Nickname.ToLower())).ToList();
        return cubeCards;
    }
    public void MoveToSideBoard(int i)
    {
        Card card = Deck[i];
        Deck.Remove(card);
        SideBoardDeck.Add(card);
        UpdateGraphs();
    }
    public void MoveToDeck(int i)
    {
        Card card = SideBoardDeck[i];
        SideBoardDeck.Remove(card);
        Deck.Add(card);
        UpdateGraphs();
    }
    public void GoToDeck()
    {
        SideBoard = false;
    }
    public void GoToSideboard()
    {
        SideBoard = true;
    }

    public void SwapFixLands()
    {
        fixlands = !fixlands;
    }

    public void SelectCards()
    {
        try
        {
            Card pick1 = CurrentPack[selectedCards[0]];
            Card pick2 = CurrentPack[selectedCards[1]];
            Deck.Add(pick1);
            Deck.Add(pick2);
            allPacks[packSelection][currentPackCount].Remove(pick1);
            allPacks[packSelection][currentPackCount].Remove(pick2);
            confirmButton = "hidden";
            buttonStyle[selectedCards[0]] = styleDefault;
            buttonStyle[selectedCards[1]] = styleDefault;
            selectedCards.Clear();

            //richTextBox1.Text = string.Join("\n", Deck.Select(p => p.Nickname));

            //code to go through each pack for bot picks
            int botNumber = 0;
            for (int i = 0; i < 8; i++)
            {
                List<Card> pack = allPacks[packSelection][i];
                if (pack == allPacks[packSelection][currentPackCount])
                    continue;
                /*Card botpick1 = pack.OrderBy(p => p.rank).ToList()[0];
                Card botpick2 = pack.OrderBy(p => p.rank).ToList()[1];
                pack.Remove(botpick1);
                pack.Remove(botpick2);*/
                if (debug)
                {
                    if (BotCommanders[botNumber] != null)
                        Console.WriteLine("Bot: Commander:" + BotCommanders[botNumber].Nickname + " Colors:" + string.Join(",", BotCommanders[botNumber].colorIdentity.Where(p => p.Value).Select(p => p.Key)));
                    else
                        Console.WriteLine("Bot: No Commander Yet");
                    Console.WriteLine("Options: ");
                    string s = "";
                    foreach (Card card in pack)
                        s += card.Nickname + " : " + string.Join(",", card.colorIdentity.Where(p => p.Value).Select(p => p.Key)) + ", ";
                    Console.WriteLine(s);
                }
                for (int pickNumber = 0; pickNumber < 2; pickNumber++)
                    BotPicks(botNumber, packSelection, pack);
                botNumber++;
            }
            currentPackCount++;
            if (currentPackCount == 8)
                currentPackCount = 0;
            CurrentPack = new List<Card>();
            StateHasChanged();
            CurrentPack = allPacks[packSelection][currentPackCount];
            if (CurrentPack.Count() == 0)
            {
                packSelection++;
                if (packSelection < 3)
                    CurrentPack = allPacks[packSelection][currentPackCount];
                else
                {
                    if (debug)
                    {
                        Console.WriteLine("FINISH");
                        for (int i = 0; i < 7; i++)
                        {
                            Console.WriteLine("Bot: Commander:" + BotCommanders[i].Nickname + " Colors:" + string.Join(",", BotCommanders[i].colorIdentity.Where(p => p.Value).Select(p => p.Key)));
                            string s = "";
                            foreach (Card card in BotCards[i])
                                s += card.Nickname + " : " + string.Join(",", card.colorIdentity.Where(p => p.Value).Select(p => p.Key)) + ", ";
                            Console.WriteLine(s);
                        }
                    }
                }
            }
            UpdateGraphs();
            UpdateCurrentPackOrder();
            StateHasChanged();
        }
        catch (Exception e)
        {
            DisplayError(e.Message + " - " + e.StackTrace);
        }
    }
    public void UpdateGraphs()
    {
        cardList = Deck.Select(p => p.Nickname).ToList();
        cardList.Add("");
        cardList.AddRange(SideBoardDeck.Select(p => p.Nickname).ToList());
        colordata = new ColorDataItem[] {
        new ColorDataItem
        {
            Color = "W",
            Count = Deck.Where(p=>p.colors.ContainsKey(Card.CMCColor.W)).Sum(p=>p.colors[Card.CMCColor.W])
        },
        new ColorDataItem
        {
            Color = "U",
              Count = Deck.Where(p=>p.colors.ContainsKey(Card.CMCColor.U)).Sum(p=>p.colors[Card.CMCColor.U])
        },
        new ColorDataItem
        {
            Color = "B",
              Count = Deck.Where(p=>p.colors.ContainsKey(Card.CMCColor.B)).Sum(p=>p.colors[Card.CMCColor.B])
        },
        new ColorDataItem
        {
            Color = "R",
             Count = Deck.Where(p=>p.colors.ContainsKey(Card.CMCColor.R)).Sum(p=>p.colors[Card.CMCColor.R])
        },
         new ColorDataItem
        {
             Color = "G",
             Count = Deck.Where(p=>p.colors.ContainsKey(Card.CMCColor.G)).Sum(p=>p.colors[Card.CMCColor.G])
        },
    };
        cmcdata = new CMCDataItem[] {
        new CMCDataItem
        {
            CMC = "1",
            Count = Deck.Where(p=>p.cmc == 1).Count()
        },
        new CMCDataItem
        {
           CMC = "2",
            Count = Deck.Where(p=>p.cmc == 2).Count()
        },
        new CMCDataItem
        {
           CMC = "3",
            Count = Deck.Where(p=>p.cmc == 3).Count()
        },
        new CMCDataItem
        {
           CMC = "4",
            Count = Deck.Where(p=>p.cmc == 4).Count()
        },
        new CMCDataItem
        {
           CMC = "5",
            Count = Deck.Where(p=>p.cmc == 5).Count()
        },
        new CMCDataItem
        {
           CMC = "6",
            Count = Deck.Where(p=>p.cmc == 6).Count()
        },
         new CMCDataItem
        {
           CMC = "7+",
            Count = Deck.Where(p=>p.cmc >= 7).Count()
        },
    };
        typedata = new TypeDataItem[] {
        new TypeDataItem
        {
            Type = "Creature",
            Count = Deck.Where(p=>p.type.ToLower().Contains("creature")).Count()
        },
        new TypeDataItem
        {
            Type = "Instant",
            Count = Deck.Where(p=>p.type.ToLower().Contains("instant")).Count()
        },
        new TypeDataItem
        {
           Type = "Sorcery",
            Count = Deck.Where(p=>p.type.ToLower().Contains("sorcery")).Count()
        },
        new TypeDataItem
        {
            Type = "Artifact",
            Count = Deck.Where(p=>p.type.ToLower().Contains("artifact")).Count()
        },
        new TypeDataItem
        {
           Type = "Enchmnt",
            Count = Deck.Where(p=>p.type.ToLower().Contains("enchantment")).Count()
        },
        new TypeDataItem
        {
           Type = "Land",
            Count = Deck.Where(p=>p.type.ToLower().Contains("land")).Count()
        },
    };
        StateHasChanged();
    }
    public Card JsonToCard(JToken card)
    {
        Card setcard = new Card();
        try
        {
            int rank = int.Parse(card["edhrec_rank"].ToString());
            /*if (rank > 8000)
                return null;*/
            setcard.rank = rank;
        }
        catch {  }
        string url = "";
        string lowresurl = "";
        string name = card["name"].ToString();
        //  string type = card["type_line"].ToString();
        if (name.Contains("/"))
            name = name.Split('/')[0];
        if (card["card_faces"] != null && card["image_uris"] == null)
        {
            for (int i = 0; i < card["card_faces"].Count(); i++)
            {
                var cardInfo = card["card_faces"][i];
                if (i == 0)
                {
                    url = cardInfo["image_uris"]["large"].ToString();
                    lowresurl = cardInfo["image_uris"]["normal"].ToString();
                    name = cardInfo["name"].ToString();
                }
                else
                {
                    Card c = new Card()
                    {
                        Nickname = cardInfo["name"].ToString(),
                        count = 1,
                        imgurl = cardInfo["image_uris"]["large"].ToString()
                    };
                }
            }
        }
        else
        {
            url = card["image_uris"]["large"].ToString();
            lowresurl = card["image_uris"]["normal"].ToString();
        }

        string manacost = "0";

        int cmc = 0;
        JArray colorid = new JArray();

        try
        {
            manacost = card["mana_cost"].ToString();
            cmc = Convert.ToInt32(card["cmc"].ToString());
            colorid = (JArray)card["color_identity"];
        }
        catch { }

        name = name.ToLower().Trim();
        setcard.type = card["type_line"].ToString();
        setcard.imgurl = url;
        setcard.lowresimgurl = lowresurl;
        setcard.Nickname = name;
        setcard.cmc = cmc;
        setcard.rarity = card["rarity"].ToString();
        try
        {
            setcard.price = Convert.ToDecimal(card["prices"]["usd"]);
        }
        catch
        {
            setcard.price = .05m;
        }
        setcard.rarity_enum = (Card.Rarity)Enum.Parse(typeof(Card.Rarity), setcard.rarity);
        setcard.Name = "Card";
        setcard.count = 1;
        setcard.imgurl = url;
        setcard.lowresimgurl = lowresurl;
        setcard.cmc = cmc;
        setcard.colorIdentity = new Dictionary<Card.CMCColor, bool>();
        foreach (Card.CMCColor c in Enum.GetValues(typeof(Card.CMCColor)))
        {

            if (setcard.colors.ContainsKey(c))
                continue;
            if (cmc > 0)
            {
                //not a land
                int count = manacost.Count(p => p == c.ToString()[0]);
                if (count > 0)
                    setcard.colors.Add(c, count);
                if (c == Card.CMCColor.C)
                    setcard.colorIdentity.Add(c, true);
                else
                    setcard.colorIdentity.Add(c, count > 0);
            }
            else
            {
                //is a land. get its colors!
                if (colorid.Any(p => p.ToString() == c.ToString()))
                {
                    setcard.colors.Add(c, 0);
                }
                if (c == Card.CMCColor.C)
                    setcard.colorIdentity.Add(c, true);
            }
        }
        return setcard;
    }
    public List<Card> CommanderClassic()
    {
        string cc = new Data().CommanderStaples;

        List<Card> CCCards = new List<Card>();

        JObject jsonResponse = JObject.Parse(cc);

        foreach (var card in jsonResponse["data"])
        {
            Card card2 = JsonToCard(card);
            if (card2.rarity == "mythic" || card2.rarity == "rare")
                card2.rarity = "uncommon";
            CCCards.Add(card2);
        }
        return CCCards;
    }
    public List<Card> AddPartners()
    {
        List<Card> partners = new List<Card>();
        string partnersjsonstring = new Data().Partners;
        JObject partnersjo = JObject.Parse(partnersjsonstring);
        foreach (var card in partnersjo["data"])
        {
            Card newCard = JsonToCard(card);
            if (newCard != null)
                partners.Add(newCard);
        }
        return partners;
    }
    public void BotPicks(int botNumber, int packNumber, List<Card> Pack)
    {
        Console.WriteLine("bot pick: " + botNumber);
        Card commander = BotCommanders[botNumber];
        List<Card> bcards = BotCards[botNumber];
        bool picked = false;

        if (commander == null)
        {
            //find legendary
            List<Card> legendaries = Pack.Where(p => p.type.Contains("Legendary") && p.type.Contains("Creature")).ToList();
            foreach (Card legend in legendaries.OrderBy(p => p.rank))
            {
                if (legend.colorIdentity.Where(p => p.Value).Count() <= 2)
                    continue;
                if (legend.rank < 3000)
                {
                    PickCard(Pack, legend, botNumber);
                    commander = legend;
                    BotCommanders[botNumber] = commander;
                    picked = true;
                    break;
                }
            }
            if (picked)
                return;
        }
        if (commander == null && packNumber == 1)
        {
            //just choose legendary
            List<Card> legendaries = Pack.Where(p => p.type.Contains("Legendary") && p.type.Contains("Creature")).ToList();
            foreach (Card legend in legendaries.OrderBy(p => p.rank))
            {
                PickCard(Pack, legend, botNumber);
                commander = legend;
                picked = true;
                break;
            }
            if (picked)
                return;
        }
        if (commander == null)
        {
            //still no commander, emphasize artifacts and good cards
            foreach (Card c in Pack.OrderBy(p => p.rank * (p.type.ToLower().Contains("artifact") ? 0.75f : 1)))
            {
                PickCard(Pack, c, botNumber);
                break;
            }
        }
        else
        {
            //ok choose for in colors
            List<Card.CMCColor> commanderColors = commander.colorIdentity.Where(p => p.Value).Select(p => p.Key).ToList();
            List<Card> commanderCards = Pack.Where(p => p.colorIdentity.Any(p => commanderColors.Contains(p.Key))).ToList();
            foreach (Card cc in commanderCards.OrderBy(p => p.rank))
            {
                List<Card.CMCColor> cardColors = cc.colorIdentity.Where(p => p.Value).Select(p => p.Key).ToList();
                if (cardColors.Any(p => !commanderColors.Contains(p)))
                {
                    //this card isnt part of color identity
                }
                else
                {
                    PickCard(Pack, cc, botNumber);
                    picked = true;
                    break;
                }
            }
            if (picked)
                return;
            foreach (Card c in Pack.OrderBy(p => p.rank * (p.type.ToLower().Contains("artifact") ? 0.75f : 1)))
            {
                PickCard(Pack, c, botNumber);
                break;
            }
        }

    }
    public void PickCard(List<Card> Pack, Card pick, int botNumber)
    {
        if (debug)
            Console.WriteLine(pick.Nickname + " : " + string.Join(",", pick.colorIdentity.Where(p => p.Value).Select(p => p.Key)));
        Pack.Remove(pick);
        BotCards[botNumber].Add(pick);
    }
}
